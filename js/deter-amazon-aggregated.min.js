import{processCloudData,loadData,registerDataOnCrossfilter,processData}from"./deter-amazon-aggregated-data.js";import{getFileDeliveryURL,getProject}from"./downloadSHP.js";import{build}from"./build-chart.js";var totalizedDeforestationArea=null,totalizedDegradationArea=null,totalizedAlertsInfoBox=null,totalizedCustomArea=null,lineSeriesMonthly=null,ringTotalizedByState=null,rowTotalizedByClass=null,barAreaByYear=null,monthFilters=null,deforestation=null,degradation=null,temporalDimension0=null,areaGroup0=null,classDimension0=null,yearDimension0=null,ufDimension0=null,monthDimension0=null,temporalDimensionCloud=null,areaGroupCloud=null,areaUfGroupCloud=null,yearDimensionCloud=null,yearGroupCloud=null,ufDimensionCloud=null,monthDimensionCloud=null,monthDimension=null,numPolDimension=null,yearDimension=null,yearGroup=null,ufDimension=null,classDimension=null,ufGroup=null,totalDeforestationAreaGroup=null,totalDegradationAreaGroup=null,totalAlertsGroup=null,yearGroup0="teste",data=null,cloudData=null,_cloudSubCharts=null,_deforestationSubCharts=null,_deforestationStatus=null,_cloudStatus=null,ringPallet=null,defPallet=null,cldPallet=null,legendOriginal=null,legendOverlay=null,defaultHeight=null,calendarConfiguration="prodes";function init(){loadConfigurations(startLoadData)}function loadConfigurations(callback){d3.json("config/deter-amazon-aggregated.json",(function(error,conf){error?console.log("Didn't load config file. Using default options."):conf&&(ringPallet=conf.ringPallet?conf.ringPallet:ringPallet,defPallet=conf.defPallet?conf.defPallet:defPallet,cldPallet=conf.cldPallet?conf.cldPallet:cldPallet,defaultHeight=conf.defaultHeight?conf.defaultHeight:defaultHeight,legendOriginal=conf.legendOriginal?conf.legendOriginal:void 0,legendOverlay=conf.legendOverlay?conf.legendOverlay:void 0),callback()}))}function startLoadData(){let cloudDataUrl=getFileDeliveryURL()+"/download/"+getProject()+"/cloud",deforestation=getFileDeliveryURL()+"/download/"+getProject()+"/monthly";loadData(cloudDataUrl).then(async data=>{let cloudData=processCloudData(data,calendarConfiguration);const deforData=await loadData(deforestation);let deforProcessed=processData(deforData,calendarConfiguration),context;return registerDataOnCrossfilter({cloudData:cloudData,deforData:deforProcessed,calendarConfiguration:calendarConfiguration})}).then(registerDataContext=>(registerDataContext.defaultHeight=defaultHeight,build(registerDataContext))).catch(error=>{console.error("Erro ao carregar os dados:",error)})}window.onload=()=>{Lang.init(),init()};